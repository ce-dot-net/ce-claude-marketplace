#!/usr/bin/env node
/**
 * ACE Plugin Setup Script (Node.js version)
 * Automatically configures npm registry for GitHub Packages
 *
 * This runs when the plugin is loaded by Claude Code
 */

import { readFileSync, writeFileSync, existsSync } from 'fs';
import { join, dirname } from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// Get paths
const pluginDir = join(__dirname, '..');
const marketplaceRoot = join(pluginDir, '..', '..');
const npmrcPath = join(marketplaceRoot, '.npmrc');

console.log('üéØ ACE Plugin Auto-Setup');
console.log('=========================\n');

function loadGitHubToken() {
  // Check environment variable first
  if (process.env.GITHUB_TOKEN) {
    console.log('‚úÖ GITHUB_TOKEN found in environment\n');
    return process.env.GITHUB_TOKEN;
  }

  // Try to load from .env file
  const envPath = join(marketplaceRoot, 'mcp-clients', 'ce-ai-ace-client', '.env');
  if (existsSync(envPath)) {
    console.log('üìÑ Loading GITHUB_TOKEN from .env file\n');
    const envContent = readFileSync(envPath, 'utf8');
    const match = envContent.match(/^GITHUB_TOKEN=(.+)$/m);
    if (match) {
      console.log('‚úÖ GITHUB_TOKEN loaded from .env\n');
      return match[1];
    }
  }

  console.log('‚ö†Ô∏è  GITHUB_TOKEN not found!');
  console.log('   For private packages, set GITHUB_TOKEN environment variable');
  console.log('   or add to mcp-clients/ce-ai-ace-client/.env file\n');
  return null;
}

function setupNpmrc() {
  const githubToken = loadGitHubToken();

  if (existsSync(npmrcPath)) {
    const content = readFileSync(npmrcPath, 'utf8');

    if (content.includes('@ce-dot-net:registry=https://npm.pkg.github.com')) {
      console.log('‚úÖ .npmrc already configured for GitHub Packages');

      // Add auth token if not present
      if (githubToken && !content.includes('//npm.pkg.github.com/:_authToken=')) {
        console.log('üìù Adding authentication token to .npmrc');
        writeFileSync(npmrcPath, content + `\n//npm.pkg.github.com/:_authToken=${githubToken}\n`);
        console.log('‚úÖ Authentication token added\n');
      } else {
        console.log('');
      }
      return;
    }

    // Append to existing .npmrc
    console.log('üìù Adding GitHub Packages configuration to existing .npmrc\n');
    let newContent = content + '\n\n# ACE Plugin - GitHub Packages Configuration\n@ce-dot-net:registry=https://npm.pkg.github.com\n';
    if (githubToken) {
      newContent += `//npm.pkg.github.com/:_authToken=${githubToken}\n`;
    }
    writeFileSync(npmrcPath, newContent);
    console.log('‚úÖ GitHub Packages configuration added\n');
  } else {
    // Create new .npmrc
    console.log('üìù Creating .npmrc with GitHub Packages configuration\n');
    let content = '# ACE Plugin - GitHub Packages Configuration\n';
    content += '# Auto-generated by ACE plugin installation\n';
    content += '# DO NOT COMMIT THIS FILE - it contains authentication token\n\n';
    content += '# Use GitHub Packages for @ce-dot-net scoped packages\n';
    content += '@ce-dot-net:registry=https://npm.pkg.github.com\n';
    if (githubToken) {
      content += `//npm.pkg.github.com/:_authToken=${githubToken}\n`;
      console.log('‚úÖ .npmrc created with authentication\n');
    } else {
      console.log('‚úÖ .npmrc created (no authentication)\n');
      console.log('   For private packages, set GITHUB_TOKEN and re-run this script\n');
    }
    writeFileSync(npmrcPath, content);
  }
}

function checkEnvironment() {
  console.log('üîê Environment Variables Check:');

  const required = {
    'ACE_SERVER_URL': process.env.ACE_SERVER_URL,
    'ACE_API_TOKEN': process.env.ACE_API_TOKEN,
    'ACE_PROJECT_ID': process.env.ACE_PROJECT_ID
  };

  let allSet = true;

  for (const [key, value] of Object.entries(required)) {
    if (value) {
      const display = key === 'ACE_API_TOKEN' ? value.substring(0, 10) + '...' : value;
      console.log(`  ‚úÖ ${key}: ${display}`);
    } else {
      console.log(`  ‚ö†Ô∏è  ${key}: NOT SET`);
      allSet = false;
    }
  }

  if (!allSet) {
    console.log('\n‚ö†Ô∏è  Some environment variables are missing!');
    console.log('\nAdd to your shell profile (~/.zshrc or ~/.bashrc):');
    console.log('  export ACE_SERVER_URL="http://localhost:9000"');
    console.log('  export ACE_API_TOKEN="your-token-here"');
    console.log('  export ACE_PROJECT_ID="your-project-id"');
  }

  console.log('');
}

function checkConfiguration() {
  console.log('üìã Configuration Files:');

  const pluginJsonPath = join(pluginDir, 'plugin.json');

  if (existsSync(pluginJsonPath)) {
    console.log('  ‚úÖ plugin.json exists');
  } else {
    console.log('  ‚ö†Ô∏è  plugin.json not found');
    console.log('     Run: cp plugin.template.json plugin.json');
  }

  console.log('');
}

function main() {
  try {
    // Setup .npmrc for GitHub Packages
    setupNpmrc();

    // Check environment variables
    checkEnvironment();

    // Check configuration files
    checkConfiguration();

    console.log('‚úÖ Setup Complete!\n');
    console.log('Next: Restart Claude Code to use the plugin\n');
  } catch (error) {
    console.error('‚ùå Setup failed:', error.message);
    process.exit(1);
  }
}

main();
